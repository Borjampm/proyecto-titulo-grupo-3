"""add patient_documents table and update patients id to uuid

Revision ID: 8f880ba9d280
Revises: eda241cfccf9
Create Date: 2025-10-16 09:42:50.401035

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '8f880ba9d280'
down_revision: Union[str, Sequence[str], None] = 'eda241cfccf9'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Enable pgcrypto extension for gen_random_uuid() function
    op.execute('CREATE EXTENSION IF NOT EXISTS "pgcrypto"')
    
    # IMPORTANT: Alter patients.id to UUID first, before creating foreign keys
    
    # Step 1: Drop the existing default on id column (if any)
    op.alter_column('patients', 'id',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=False)
    
    # Step 2: Alter column type from INTEGER to UUID
    # Using gen_random_uuid() to generate new UUIDs for existing rows
    op.execute('ALTER TABLE patients ALTER COLUMN id TYPE UUID USING gen_random_uuid()')
    
    # Step 3: Set new default for future inserts
    op.alter_column('patients', 'id',
               existing_type=sa.UUID(),
               server_default=sa.text('gen_random_uuid()'),
               existing_nullable=False)
    
    # Step 4: Update timestamp columns to include timezone
    op.alter_column('patients', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('patients', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    
    # Step 5: Now create patient_documents table with foreign key to patients.id (UUID)
    op.create_table('patient_documents',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('patient_id', sa.UUID(), nullable=False),
    sa.Column('document_type', sa.Enum('MEDICAL_REPORT', 'LAB_RESULT', 'PRESCRIPTION', 'IMAGING', 'CONSENT_FORM', 'DISCHARGE_SUMMARY', 'OTHER', name='documenttype'), nullable=False),
    sa.Column('file_url', sa.String(length=1024), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['patient_id'], ['patients.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_patient_documents_patient_id'), 'patient_documents', ['patient_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Step 1: Drop patient_documents table first (to remove foreign key constraint)
    op.drop_index(op.f('ix_patient_documents_patient_id'), table_name='patient_documents')
    op.drop_table('patient_documents')
    
    # Step 2: Revert timestamp columns
    op.alter_column('patients', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('patients', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    
    # Step 3: Drop UUID default on id column
    op.alter_column('patients', 'id',
               existing_type=sa.UUID(),
               server_default=None,
               existing_nullable=False)
    
    # Step 4: Convert id from UUID back to INTEGER
    # Note: This will generate sequential integers from 1..N
    op.execute(
        "ALTER TABLE patients ALTER COLUMN id TYPE INTEGER "
        "USING ROW_NUMBER() OVER (ORDER BY created_at)"
    )
    
    # Step 5: Recreate the sequence for auto-increment
    op.execute("CREATE SEQUENCE IF NOT EXISTS patients_id_seq")
    op.execute(
        "SELECT setval('patients_id_seq', "
        "(SELECT MAX(id) FROM patients), true)"
    )
    op.alter_column('patients', 'id',
               existing_type=sa.INTEGER(),
               server_default=sa.text("nextval('patients_id_seq')"),
               existing_nullable=False)
    # ### end Alembic commands ###
